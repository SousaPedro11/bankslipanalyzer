name: Koper Financial CI

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string

jobs:
  build:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10.8"
      - name: Install poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache/Restore dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ inputs.project }}/.venv
          key: cache-${{ inputs.project }}-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          # key: ${{ runner.os }}-python${{ matrix.python-version }}-poetryenv-${{ hashFiles('poetry.lock') }}

      - name: Create env file
        run: cp .env.example .env

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: ${{ inputs.project }}

      - name: Outdated dependencies
        run: poetry show -o
        working-directory: ${{ inputs.project }}

      - name: Black
        run: |
          source .venv/bin/activate
          poetry run black --check -v --diff .
        working-directory: ${{ inputs.project }}

      - name: Flake
        run: |
          source .venv/bin/activate
          flake8 app/
        working-directory: ${{ inputs.project }}

      - name: Linting
        run: |
          source .venv/bin/activate
          pylint -E app/
        working-directory: ${{ inputs.project }}

      - name: Run Tests
        run: |
          source ${{ inputs.project }}/.venv/bin/activate
          cd ${{ inputs.project }}
          poetry run pytest -s -q -vv app/tests/
